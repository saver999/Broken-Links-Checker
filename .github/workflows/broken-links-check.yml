name: Broken Links Checker
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 1 * *'
env:
  ISSUE_TEMPLATE: ".github/workflows/ISSUE_TEMPLATE.md"

  contents: read
  issues: write

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Get links from README.md
        id: get-links
        run: |
          LINKS=$(sed -nE 's/\[.*\]\((http[s]?:\/\/[^)]*)\)/\1/p' README.md | paste -sd ,)
          echo "WEBSITE_URL=$LINKS" >> $GITHUB_ENV
      - name: Run Broken Links Checker
        run: |
          # Split the list of links into an array separated by commas
          read -ra LINKS <<< $WEBSITE_URL
          BROKEN_LINKS=()
          
          # Scan the links and verify if they are reachable
          for link in "${LINKS[@]}"; do
              if ! curl -IsSk "$link" > /dev/null; then
                BROKEN_LINKS+=("$link")
              fi
          done
          
          if [ ${#BROKEN_LINKS[@]} -gt 0 ]; then
           echo "Broken links found: ${BROKEN_LINKS[@]}" >&2
           echo "Broken links found, failing the workflow" >&2
      
           exit 1
          else
           echo "No broken links found"
          fi
         

      - name: Set BROKEN_LINKS as Environment Variable
        if: failure()
        run: |
          # Crea un file temporaneo per memorizzare i link rotti
          echo "${BROKEN_LINKS[@]}" > broken_links.txt

      - name: Create Issue for Broken Links
        if: failure()
        run: |
          # Leggi i link rotti dal file temporaneo
          BROKEN_LINKS=$(cat broken_links.txt)

          # Crea una stringa con i link rotti formattati come elenco puntato
          formatted_links=$(printf "\\n- %s" "$BROKEN_LINKS")

          # Crea una stringa JSON con il corpo dell'issue
          json_data="{\"title\":\"Broken Links Found\",\"body\":\"Broken links found:$formatted_links\"}"

          # Invia una richiesta POST per creare un problema su GitHub
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d "$json_data" \
            https://api.github.com/repos/${{ github.repository }}/issues
      
      
      
      
